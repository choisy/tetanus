---
title: "Processing tetanus ELISA data"
number-sections: true
format:
  html:
    toc: true
editor: source
editor_options: 
  chunk_output_type: console
#bibliography: references.bib
#csl: the-american-naturalist.csl
---

```{r include = FALSE}
par2 <- function(...) par(..., mgp = c(1.5, .5, 0), bty = "n")

knitr::knit_hooks$set(
  margin1 = function(before, options, envir) {
    if (before) par2(plt = c(.105, .97, .15, .95)) else NULL
  },
  margin2 = function(before, options, envir) {
    if (before) par2(plt = c(.17, .97, .23, .95)) else NULL
  },
  margin3 = function(before, options, envir) {
    if (before) par2(plt = c(.12, .88, .2, .99)) else NULL
  },
  margin4 = function(before, options, envir) {
    if (before) par2(plt = c(.11, .99, .01, .8)) else NULL
  })

eps <- .8
knitr::opts_chunk$set(margin1    = TRUE,
                      fig.retina = 2,
                      fig.align  = "center",
                      fig.height = eps * 5, # default is 5
                      fig.width  = eps * 7) # default is 7
```

## Parameters

The concentration of the reference anti-toxin is 10 IU/mL:

```{r}
ref_conc <- 10
```

The path to the data:

```{r}
path2data <- paste0(Sys.getenv("HOME"), "/Library/CloudStorage/",
                    "OneDrive-OxfordUniversityClinicalResearchUnit/",
                    "GitHub/choisy/tetanus/")
```

The name of the data file:

```{r include = FALSE}
make_path2 <- function(x) paste0(path2data, "cache/", x)
file_exists <- function(x) file.exists(make_path2(x))
readRDS3 <- function(x) readRDS(make_path2(x))
saveRDS2 <- function(object, file) saveRDS(object, make_path2(file))
```

```{r}
datafile <- "Tetanus_Dr. Thinh_HCDC samples.xlsx"
```

Whether we discount the blank values or not:

```{r}
discount_blank <- FALSE
```


## Packages

Required packages:

```{r}
required_packages <- c("dplyr", "tibble", "readxl", "purrr", "stringr", "mvtnorm")
```

Installing those that are not installed:

```{r}
to_inst <- required_packages[! required_packages %in% installed.packages()[,"Package"]]
if (length(to_inst)) install.packages(to_inst)
```

Loading some for interactive use:

```{r message = FALSE}
library(dplyr)
library(purrr)
library(stringr)
```

## General functions

Tuning some base functions:

```{r}
lwd_val <- 2
color_data <- 4
color_model <- 2

make_path <- function(file) paste0(path2data, file)
read_excel2 <- function(file, ...) readxl::read_excel(make_path(file), ...)
excel_sheets2 <- function(file) readxl::excel_sheets(make_path(file))
plot2 <- function(...) plot(..., col = color_data)
seq2 <- function(...) seq(..., le = 512)
plotl <- function(...) plot(..., type = "l", col = color_model, lwd = lwd_val)
points2 <- function(...) points(..., col = color_data, pch = 3, lwd = lwd_val)
lines2 <- function(...) lines(..., col = color_model, lwd = lwd_val)
print_all <- function(x) print(x, n = nrow(x))
approx2 <- function(...) approx(..., ties = "ordered")
polygon2 <- function(x, y1, y2, ...) {
  polygon(c(x, rev(x)), c(y1, rev(y2)), border = NA, ...)
}
```

A function that draws the frame of a plot:

```{r}
plot_frame <- function(...) {
  plot(..., type = "n", xlab = "log(concentration)", ylab = "optical density")
}
```

A function that splits the rows of a dataframe into a list of dataframes:

```{r}
rowsplit <- function(df) split(df, 1:nrow(df))
```

A function that simulates data from an `nls` object:

```{r}
simulate_nls <- function(object, newdata, nb = 9999) {
  nb |>
    mvtnorm::rmvnorm(coef(object), vcov(object)) |> 
    as.data.frame() |>
    rowsplit() |> 
    map(as.list) |> 
    map(~ c(.x, newdata)) |> 
    map_dfc(eval, expr = parse(text = as.character(formula(object))[3]))
}
```

Functions for multipanel plots:

```{r}
mcx <- 3 / 2

par_mfrow <- function(mfrow) {
  par(mfrow = mfrow, mex = mcx, cex.axis = mcx, cex.lab = mcx, cex.main = mcx)
}
```


## Preparing the data

A function that removes the plate slot(s) that do(es) not contain any data:

```{r}
remove_empty_plates <- function(x) x[map_lgl(x, ~ ! all(is.na(.x$RESULT)))]
```

A function that adds the sample ID whenever missing:

```{r}
add_sample_id <- function(x) {
  id <- x$HCDC_SAMPLE_ID
  
  x$HCDC_SAMPLE_ID <- grep("Anti", id, value = TRUE, invert = TRUE) |> 
    na.exclude() |> 
    unique() |> 
    rep(each = 3) |> 
    c(grep("Anti", id, value = TRUE))
  
  x
}
```

Reading and arranging the data:

```{r}
make_blanks_management1 <- function() {
  if (discount_blank) {
    return(function(x) mutate(x, od = RESULT - mean(c_across(starts_with("BLANK")))))
  }
  function(x) mutate(x, od = RESULT)
}

manage_blanks1 <- make_blanks_management1()

plates <- datafile |>
  excel_sheets2() |> 
  (\(.x) .x[grepl("Plate", .x)])() |> 
  (\(.x) setNames(map(.x, read_excel2, file = datafile), .x))() |> 
  map(~ setNames(.x, toupper(names(.x)))) |> 
  remove_empty_plates() |> 
  map(add_sample_id) |> 
  map(manage_blanks1)
```

## Specific functions

A 4-parameter logistic model that relates optical density $\mbox{OD}$ to the logarithm
of the concentration $\mbox{LC}$:

$$
\mbox{OD} = d + \frac{a - d}{1 + e^{\left(\mbox{LC} - c\right)b}}
$$

where:

* $a$ is the minimum $\mbox{OD}$, *i.e.* when the concentration is $0$;
* $d$ is the maximum $\mbox{OD}$, *i.e.* when the concentration is $+\infty$;
* $c$ is the $\mbox{LC}$ of the point of inflexion, *i.e.* where $\mbox{OD} = (d - a) / 2$;
* $b$ is the Hill's slope of the curve, *i.e.* the slope of the curve at the inflexion point.

Two functions that implement the calibration of a 4PL model:

```{r}
good_guess4PL <- function(x, y, eps = 1) {
  nb_rep <- unique(table(x))
  the_order <- order(x)
  x <- x[the_order]
  y <- y[the_order]
  a <- min(y)
  d <- max(y)
  c <- approx2(y, x, (d - a) / 2)$y
  list(a = a,
       b = (approx2(x, y, c + eps)$y - approx2(x, y, c - eps)$y) / (2 * eps),
       c = c, d = d)
}

nls4PL <- function(df) {
  nls(od ~ d + (a - d) / (1 + exp((log(concentration) - c) * b)),
      df, with(df, good_guess4PL(log(concentration), od)))
}
```

A function that generates the standard curve with confidence interval in the form of a
dataframe:

```{r}
standard_curve_data <- function(df, model, le = 512, level = .95, nb = 9999) {
  log_concentration <- log(df$concentration)
  logc <- seq(min(log_concentration), max(log_concentration), le = le)
  alpha <- (1 - level) / 2
  df |> 
    model() |> 
    simulate_nls(list(concentration = exp(logc)), nb) |> 
    apply(1, quantile, c(alpha, .5, 1 - alpha)) |>
    t() |> as.data.frame() |> 
    setNames(c("lower", "median", "upper")) |> 
    (\(.x) bind_cols(logc = logc, .x))()
}
```

A function that plots the output of `standard_curve_data()` with or without data:

```{r}
plot_standard_curve <- function(scdf, data = NULL, ylim = NULL) {
  with(scdf, {
    if (is.null(ylim)) ylim <- c(0, max(upper, data$od))
    plot_frame(logc, scdf$lower, ylim = ylim)
    polygon2(logc, lower, upper, col = adjustcolor(color_model, .2))
    lines2(logc, median)
  })
  if (! is.null(data)) with(data, points2(log(concentration), od))
}
```

A function that converts a dataframe into a function:

```{r}
data2function <- function(df) {
  with(df, {
    make_pred_function <- function(data) approxfun(data, logc)
    pred_lwr <- make_pred_function(upper)
    pred_mdi <- make_pred_function(median)
    pred_upp <- make_pred_function(lower)
    function(x) c(lower = pred_lwr(x), median = pred_mdi(x), upper = pred_upp(x))
  })
}
```

A function that retrieves the anti-toxins data from a plate:

```{r}
get_antitoxins <- function(plate) {
  plate |>
    filter(HCDC_SAMPLE_ID == "Anti_toxin") |> 
    mutate(concentration = ref_conc / DILUTION_FACTORS)
}
```

A function that retrieves the samples data from a plate and computes the
log-concentrations:

```{r}
process_samples <- function(plate, std_crv) {
  plate |> 
    filter(HCDC_SAMPLE_ID != "Anti_toxin") |> 
    rowwise() |> 
    mutate(logconcentration = list(std_crv(RESULT))) |> 
    tidyr::unnest_wider(logconcentration)
}
```

An example on the first plate:

```{r}
plate <- plates$Plate_01_hcdc
```

The 4 steps:

```{r}
# step 1: retrieve the anti-toxins data:
anti_toxins <- get_antitoxins(plate)
# step 2: generate the standard curve with CI in the form of a dataframe:
standard_curve_df <- standard_curve_data(anti_toxins, nls4PL)
# step 3: convert the standard curve dataframe into a standard curve function:
standard_curve <- data2function(standard_curve_df)
# step 4: convert the OD of the samples into log-concentrations:
samples <- process_samples(plate, standard_curve)
```

The plots of the standard curve, with and without data:

```{r}
plot_standard_curve(standard_curve_df)
plot_standard_curve(standard_curve_df, anti_toxins)
```


## Processing all the plates

The four steps applied to all the plates:

```{r eval = FALSE}
anti_toxins <- map(plates, get_antitoxins)
standard_curve_df <- map(anti_toxins, standard_curve_data, nls4PL)
standard_curves <- map(standard_curve_df, data2function)
samples <- map2(plates, standard_curves, process_samples)
```

```{r include = FALSE}
anti_toxins <- map(plates, get_antitoxins)
if (file_exists("standard_curve_df.rds")) {
  standard_curve_df <- readRDS3("standard_curve_df.rds")
} else {
  standard_curve_df <- map(anti_toxins, standard_curve_data, nls4PL)
  saveRDS2(standard_curve_df, "standard_curve_df.rds")
}
standard_curves <- map(standard_curve_df, data2function)
samples <- map2(plates, standard_curves, process_samples)
```

Showing all the standard curves together:

```{r}
xs <- map(standard_curve_df, ~ .x$logc)
ys <- map(standard_curve_df, ~ .x$median)
plot_frame(unlist(xs), unlist(ys))
walk2(xs, ys, lines2)
```

Showing the standard curves and data points, plate by plate:

```{r fig.width = 8.3, fig.height = 15.8, margin1 = FALSE, margin2 = TRUE}
titles <- anti_toxins |> 
  names() |> 
  str_remove("_hcdc") |> 
  str_replace("_", " ")

opar <- par_mfrow(c(8, 3))

walk(seq_along(anti_toxins), function(i) {
  plot_standard_curve(standard_curve_df[[i]], anti_toxins[[i]], ylim = c(- .2, 4))
  mtext(titles[i], line = -4, at = -4)
})

par(opar)
```

Showing the distributions of the ODs for the 3 dilutions, across the plates, together
with the standard curves:

```{r fig.width = 4, fig.height = 7.5, margin1 = FALSE, margin3 = TRUE, message = FALSE}
dilutions_factors <- c(50, 100, 200)
dilutions <- map_dfc(dilutions_factors,
    function(x) map(samples, ~ .x |>
                               filter(DILUTION_FACTORS == x) |> 
                               pull(RESULT)) |> unlist())

xlim <- c(-.3, 4.1)
hist2 <- function(x, y, ...) {
  plot_frame
  plot(unlist(ys), unlist(xs), type = "n", xaxs = "i", xlim = xlim,
     xlab = "optical density", ylab = "log(concentration)")
  walk2(ys, xs, lines2)
  par(new = TRUE)
  hist(x, breaks = seq(0, 4, .1), col = color_data, xaxs = "i",
       axes = FALSE, ann = FALSE, xlim = xlim, ylim = c(0, 300), , ...)
  axis(4); mtext("number of samples", 4, 1.5)
  abline(v = c(.5, 3.2), lty = 2)
  mtext(y, 3, -1, font = 2)
}

opar <- par_mfrow(c(3, 1))
walk2(dilutions, paste("Dilution", dilutions_factors), hist2)
par(opar)
```

Plotting the concentration estimates per plates and dilution for all the samples:

```{r fig.width = 8.3, fig.height = 32.6, margin1 = FALSE, margin4 = TRUE}
plot_concentrations <- function(x) {
  nb_replicates <- unique(table(x$HCDC_SAMPLE_ID))
  nb <- nrow(x)
  colors <- rep(2:4, nb / nb_replicates)
  tmp <- (1:(nb + nb / nb_replicates - 1))
  vertical_lines <- seq(nb_replicates + 1,
                        tail(tmp, nb_replicates + 1)[1],
                        nb_replicates + 1)
  xs <- tmp[-vertical_lines]
  x |> 
    mutate(across(c(lower, median, upper), ~ exp(.x) * DILUTION_FACTORS)) |> 
    with({
      plot(xs, median, col = colors, lwd = lwd_val,
           ylim = c(0, max(median, upper, na.rm = TRUE)),
           axes = FALSE, xlab = NA, ylab = "concentration (IU/mL)")
      axis(2)
      segments(xs, lower, xs, upper, col = colors, lwd = lwd_val)
    })
  abline(v = vertical_lines, col = "grey")
}

opar <- par_mfrow(c(11, 2))
walk2(samples, titles, ~ {plot_concentrations(.x); mtext(.y)})
par(opar)
```

Showing where estimates are possible (in green). When they are not possible, it's
either because the concentration is too high (in red), or because the concentration is
too low (in orange). Each of the 22 columns represents a plate and each of the 22 rows
with each column represents a sample. Within each sample, the 3 columns are for the
point estimates of the concentrations (middle) with 95% confidence interval (lower and
upper bounds in the left and right columns respectively) and the 3 rows are for the 
3 dilutions values (50, 100 and 200 from top to bottom):

```{r fig.width = 8, fig.height = 8.5}
# function to add missing values if there are less than 22 samples in a plate:
nb_smpls <- 22 # number of samples per plate
nb_dltns <- 3 # number of dilutions per sample
nb_estmts <- 3 # number of estimates per dilution (point + confidence interval)
template <- matrix(rep(NA, nb_smpls * nb_dltns * nb_estmts), nrow = nb_estmts)
format_mat <- function(x) {
  template[, 1:ncol(x)] <- x
  template
}

# the function that draws the heatmap for 1 plate:
abline2 <- function(...) abline(..., col = "white")
plot_heatmap <- function(x) {
  x |> 
    mutate(across(c(lower, median, upper),
                  ~ as.numeric(is.na(.x)) * ((RESULT > 2) + 1))) |> 
    select(lower, median, upper) |> 
    as.matrix() |> 
    t() |>
    format_mat() |> 
    (\(.x) .x[, rev(seq(ncol(.x)))])() |> 
    (\(.x) image(1:nb_estmts, 1:(nb_smpls * nb_dltns), .x,
                 axes = FALSE, ann = FALSE, col = c(3, 7, 2)))()
  
  abline2(v = c(1.5, 2.5))
  abline2(h = seq(nb_dltns, nb_dltns * nb_smpls, nb_dltns) + .5)
#  axis(2, seq(mean(seq(nb_dltns)), nb_dltns * nb_smpls, nb_dltns), nb_smpls:1)
#  box(bty = "o")
}

opar <- par(mfrow = c(1, 22))
walk(samples, plot_heatmap)
par(opar)
```

Number of samples for which a dilution of 200 is not enough to estimate the
concentration:

```{r}
nb_NA <- samples |> 
  bind_rows() |> 
  mutate(total =  is.na(lower) + is.na(median) + is.na(upper))

nb_NA |> 
  group_by(HCDC_SAMPLE_ID) |>
  summarise(total = sum(total)) |> 
  filter(total > 8) |> 
  nrow()
```

Out of 481 samples,

* there is 1 sample (0.2 %) for which a dilution of 50 is already too much in order to
estimate the lower bound of its 95% confidence interval;
* there are 164 samples (34.0 %) for which a dilution of 200 is not enough in order to
do any estimation of the concentration.

The number of missing estimates (point or any of tbe bounds of the confidence interval)
as a function of the dilution:

```{r}
# A function that adds axes and grid:
add_grid <- function() {
  axis(1); axis(2, 0:3)
  abline(h = 0:3, col = "grey")
  abline(v = c(50, 100, 200), col = "grey")
}

plot3 <- function(...) {
  plot2(..., axes = FALSE, xlab = "dilution", ylab = "number of missing estimates")
}

# Preparing the data:
nb_missing <- nb_NA |> 
  group_by(DILUTION_FACTORS, total) |> 
  tally() |> 
  ungroup()

mean_nb_missing <- nb_missing |> 
  group_by(DILUTION_FACTORS) |> 
  mutate(mean = sum(total * n) / sum(n)) |> 
  ungroup() |> 
  select(- total,  - n) |> 
  unique()

# The plot:
with(nb_NA, plot3(jitter(DILUTION_FACTORS), jitter(total)))
with(mean_nb_missing, lines(DILUTION_FACTORS, mean, lwd = 2, col = 2))
add_grid()
```

An alternative plot:

```{r}
with(nb_missing, plot3(DILUTION_FACTORS, total, cex = sqrt(n) / sqrt(min(n)), pch = 19,
                       xlim = c(45, 205), ylim = c(-.2, 3.3)))
with(mean_nb_missing, lines(DILUTION_FACTORS, mean, lwd = 2, col = 2))
add_grid()
```


## Negative controls

A function that retrieves the negative controls from 1 plate:

```{r}
make_blanks_management2 <- function() {
  if (discount_blank) {
    return(function(x) mutate(x,
                              across(starts_with("NEGATIVE"),
                                     ~ .x - mean(c_across(starts_with("BLANK"))))))
  }
  I
}

manage_blanks2 <- make_blanks_management2()

get_negatives_controls <- function(x) {
  x |> 
    manage_blanks2() |> 
    select(starts_with("NEGATIVE")) |> 
    unique() |> 
    tidyr::pivot_longer(everything(), names_to = "dilution", values_to = "od") |> 
    mutate(across(dilution, ~ stringr::str_remove(.x, "NEGATIVE_") |> as.integer()))
}
```

Retrieving all the negative controls of all the plates and computing the
concentrations:

```{r}
neg_contr <- plates |>
  map_dfr(get_negatives_controls, .id = "plate") |> 
  rowwise() |> 
  mutate(concentration = list(exp(standard_curve(od)))) |> 
  tidyr::unnest_wider(concentration) |> 
  mutate(across(c(lower, median, upper), ~ .x * dilution),
         ci_range   = upper - lower,
         thresh0_01 = upper < .01,
         thresh0_10 = upper < .1)
```

Selecting the best dilution for each sample and checking that the negative control are
identified as negative:

```{r}
neg_contr |> 
  group_by(plate) |> 
  filter(ci_range ==min(ci_range, na.rm = TRUE)) |> 
  ungroup() |> 
  print_all()
```

Looking at what happens with place 7:

```{r}
filter(neg_contr, plate == "Plate_07_hcdc")
```

